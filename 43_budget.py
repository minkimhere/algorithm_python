# S사에서는 각 부서에 필요한 물품을 지원해 주기 위해 부서별로 물품을 구매하는데 필요한 금액을 조사했습니다. 그러나, 전체 예산이 정해져 있기 때문에 모든 부서의 물품을 구매해 줄 수는 없습니다. 그래서 최대한 많은 부서의 물품을 구매해 줄 수 있도록 하려고 합니다.

# 물품을 구매해 줄 때는 각 부서가 신청한 금액만큼을 모두 지원해 줘야 합니다. 예를 들어 1,000원을 신청한 부서에는 정확히 1,000원을 지원해야 하며, 1,000원보다 적은 금액을 지원해 줄 수는 없습니다.

# 부서별로 신청한 금액이 들어있는 배열 d와 예산 budget이 매개변수로 주어질 때, 최대 몇 개의 부서에 물품을 지원할 수 있는지 return 하도록 solution 함수를 완성해주세요.

# 제한사항
# d는 부서별로 신청한 금액이 들어있는 배열이며, 길이(전체 부서의 개수)는 1 이상 100 이하입니다.
# d의 각 원소는 부서별로 신청한 금액을 나타내며, 부서별 신청 금액은 1 이상 100,000 이하의 자연수입니다.
# budget은 예산을 나타내며, 1 이상 10,000,000 이하의 자연수입니다.


# 푼 방법1
# 최대한 많이 지원해줘야하니까 정렬해줘야함
# def solution(d, budget):
#     answer = []
#     d.sort()
#     for n in d:
#         answer.append(n)
#         if sum(answer) > budget:
#             answer.pop()
#             print(answer)
#             break
#     return len(answer)

# 다른 방법2
# 예산에서 하나하나씩 빼는 걸로 계산
# 예산이 마이너스되면 멈추고 마이너스 아닐 때만 그 횟수를 더해준다. (어차피 물품의 부서별 갯수[1,2,3]가 필요한 게 아니라 몇 개의 부서(len(부서)) -> 3개 에 지원해줄 수 있는 것만 구하면 되니까 횟수를 구하는 방식임. 방법1의 경우는 부서별 갯수 구한 다음에 그 부서를 다시 세는 방법이었음. )
def solution(d, budget):
    d.sort()
    count = 0

    for n in d:
        budget -= n
        if budget < 0:
            break
        count += 1
    return count


d = [1,3,2,5,4]
budget = 9
solution(d, budget)